extends ../layout/base

block css
    link(rel="stylesheet" href="/css/chat.css")
block layout-content
    .page-container
        h1(id='title')
            span#modify Room: #{roomName}, Users: #{users},
            span#username You: #{username}
        div(id="readyCount") Ready: 0 / 0
        button(onclick="quitRoom()") Quit
        button(id="ready" onclick="ready()") Ready
        button(id="notReady" onclick="ready()") Not Ready
        div(id="startGame")
            form(id="startForm")
                label(for="rows") Rows:
                input(type="number" id="rows" name="rows" min="5" max="100" value="10")
                label(for="cols") Cols:
                input(type="number" id="cols" name="cols" min="5" max="100" value="10")
            button(id="startGameButton" onclick="startGame()") Start Game
    .page-container
        .game-container
            .canvas-container
                .info-container
                    .bombs-container
                        canvas(id="bombsCanvas")
                        div(id="bombs") 0
                    div(id="timer") 0
                canvas(id="minesweeperCanvas")
            .chat-container
                div(id="chat")
                    div(id="chat-messages")
                input(type="text" id="message-input" placeholder="Type your message...")
                button(id="send-message" onclick="sendMessage()") Send
    div(id="resultContainer").results-container
        h1 Results
        div(id="results")
    div(id="waiting").results-container
        h1 Waiting for other players...
    script.
        const socket = io();

        // ========
        // GAME
        // ========

        let isScriptAppended = false;

        const resultContainer = document.getElementById("resultContainer");
        const results = document.getElementById("results");
        const title = document.getElementById("modify");
        const username = document.getElementById("username").innerText.split(" ")[1];
        const startDiv = document.getElementById("startGame");
        const readyButton = document.getElementById("ready");
        const notReadyButton = document.getElementById("notReady");
        const waiting = document.getElementById("waiting");
        const readyCountElement = document.getElementById("readyCount");
        let clickStartButton = 0;
        let isReady = false;
        let userReady = 0;
        let roomName;
        let users;

        function updateTitle(room, userList) {
            title.innerText = `Room: ${room}, Users: ${userList.join(", ")} `;
        }

        function updateReadyCount(count) {
            readyCountElement.innerText = `Ready: ${count} / ${users.length - 1}`;
        }

        if (!isScriptAppended) {
            const script = document.createElement('script');
            script.src = `/js/versus.bundle.js`;
            document.body.appendChild(script);
            isScriptAppended = true; // Mark the script as appended
        }

        window.addEventListener('beforeunload', function (e) {
            e.preventDefault();
            fetch('/api/disconnect', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({roomName, username})
            }).then((response) => {
                console.log(response);
            }).catch((error) => {
                console.log(error);
            });
        });

        socket.on('roomData', (data) => {
            //console.log('Room data:', data);
            roomName = data.roomName;
            users = data.users;
            if (data.usersReady){
                userReady = data.usersReady;
                updateReadyCount(data.usersReady)
            }
            // First to join is host (first in the list)
            if (username === users[0]){
                startDiv.style.display = "block";
                readyButton.style.display = "none";
                notReadyButton.style.display = "none";
            }
            else {
                startDiv.style.display = "none";
                notReadyButton.style.display = "none";
            }
            updateReadyCount(userReady);
            updateTitle(roomName, users);
        });

        function quitRoom() {
            if (username !== users[0] && isReady) {
                updateReadyCount(--userReady)
            }
            socket.emit('quitRoom', {roomName, username, userReady});
            window.location.href = '/';
        }

        function ready() {
            if (isReady) {
                socket.emit('notReady', {roomName, username});
                isReady = false;
            } else {
                socket.emit('ready', {roomName, username});
                isReady = true;
            }
        }

        socket.on('notReadyReceive', (data) => {
            console.log('notReadyRecive', data);
            updateReadyCount(--userReady)
        });

        socket.on('readyReceive', (data) => {
            console.log('readyRecive', data);
            updateReadyCount(++userReady)
        });

        function startGame() {
            const rows = document.getElementById("rows").value;
            const cols = document.getElementById("cols").value;
            // verify rows and cols
            if (rows < 5 || rows > 100 || cols < 5 || cols > 100) {
                alert("Rows and cols must be between 5 and 100");
                return;
            }

            // Check rows and cols values

            resultContainer.style.display = "none";
            if (userReady !== users.length - 1) {
                alert("Not all users are ready!");
                return;
            }
            socket.emit('startVersusGame', {roomName, rows, cols});
            startDiv.style.display = "none";
        }

        socket.on('receiveVersusGame', (data) => {
            const numBombs = data.numBombs;
            const bombCoordinates = data.bombCoordinates;
            const rows = data.rows;
            const cols = data.cols;
            startDiv.style.display = "none";
            //const rows = data.rows;
            //const cols = data.cols;
            resultContainer.style.display = "none";

            readyButton.style.display = "none";
            notReadyButton.style.display = "none";
            readyCountElement.style.display = "none";
            //console.log('rows', rows, 'cols', cols);
            document.dispatchEvent(new CustomEvent('startVersusGameEvent', {detail: {numBombs, bombCoordinates, rows, cols}}));
        });

        socket.on('test', (data) => {
            console.log('test', data);
        });

        // Wait for the 'endGame' event to be dispatched
        document.addEventListener('endVersusGame', (event) => {
            //console.log('endVersusGame event received');
            const {result} = event.detail;
            // Emit a signal to the socket
            waiting.style.display = "block";
            socket.emit('gameFinished', {result, roomName, username});
        });

        socket.on('versusGameResult', (data) => {
            //console.log("Game result:", data);
            const allResults = data.results;
            const sortedResults = allResults.sort((a, b) => a.score - b.score);
            waiting.style.display = "none";
            resultContainer.style.display = "flex";
            // Build a string with results
            let resultsText = "Results:\n";
            sortedResults.forEach((result, index) => {
                resultsText += `${index + 1}. ${result.username} - Score: ${result.score}\n`;
            });
            results.innerText = "Bravo : " + data.winner + "\n" + "Score : " + data.result;
            results.innerText = results.innerText + "\n" + resultsText;
            clickStartButton = 0;
            userReady = 0;
            readyCountElement.style.display = "block";
            updateReadyCount(userReady);
            isReady = false;
            if (username === users[0]) {
                startDiv.style.display = "block";
            } else {
                startDiv.style.display = "none";
                readyButton.style.display = "block";
            }
        })

        // =======
        // CHAT
        // =======

        const chatDiv = document.getElementById('chat-messages');
        const chatInput = document.getElementById('message-input');

        chatInput.addEventListener('keyup', (event) => {
            if (event.key === 'Enter' && chatInput.value !== '') {
                sendMessage();
            }
        });


        function sendMessage() {
            let message = chatInput.value;

            // Enforce a maximum character limit (e.g., 144 characters)
            const maxCharacterLimit = 144;
            if (message.length > maxCharacterLimit) {
                message = message.substring(0, maxCharacterLimit); // Trim the message
            }

            chatInput.value = '';

            socket.emit('sendMessage', {roomName, username, message});
        }

        socket.on('receiveMessage', (data) => {
            const {username, message} = data;
            const messageElement = document.createElement('p');
            messageElement.innerText = `${username}: ${message}`;
            chatDiv.appendChild(messageElement);
        });


